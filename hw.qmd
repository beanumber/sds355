---
title: Homework
show-solutions: false
---

::: {.callout-note}

All homework assignments must be completed in Quarto and submitted as a PDF to Moodle by the corresponding **Friday at 5 pm**. 

You must **show your code**!!

:::


```{r}
#| message: false
library(tidyverse)
library(Lahman)
```

## HW 1: Due 9/12

::: {.callout-tip}

You may find [the schema for the **Lahman** database](https://cdalzell.github.io/Lahman/) helpful.

:::

1. Use the **Lahman** package to identify when MLB moved to a 154-game schedule? When did they move to a 162 game schedule? Since the advent of the 154-game schedule, in which years were there interruptions in play? Can you Identify the cause of each? 

::: {.content-hidden unless-meta="show-solutions"}
::: {.callout-note title="SOLUTION"}

```{r}
Teams |>
  group_by(yearID) |>
  summarize(
    max_G = max(G),
    mean_G = mean(G)
  ) |> 
  arrange(yearID) |>
  print(n = 200)
```

The 154-game schedule was standardized in 1904 across both leagues. 
The AL moved to a 162-game schedule in 1961, and the NL followed the next year. 

There were interruptions in play in:

- 1918-1919 (WWI)
- [1972 (player's strike)](https://en.wikipedia.org/wiki/1972_Major_League_Baseball_strike)
- [1981 (player's strike)](https://en.wikipedia.org/wiki/1981_Major_League_Baseball_strike)
- [1994-1995 (strike)](https://en.wikipedia.org/wiki/1994%E2%80%9395_Major_League_Baseball_strike)
- 2020 (COVID)

:::
:::

2. Since the advent of the 154-game schedule, use the **Lahman** package to rank the 10 best and 10 worst teams of all time, as measured by winning percentage. 

::: {.content-hidden unless-meta="show-solutions"}
::: {.callout-note title="SOLUTION"}

```{r}
teams <- Teams |>
  mutate(
    wpct = W / (W + L)
  ) |>
  filter(yearID >= 1904) |>
  arrange(desc(wpct)) |>
  select(yearID, teamID, G, W, L, wpct, WSWin)

teams |>
  head(10)

teams |>
  tail(10)
```

:::
:::

3. Use the **Lahman** package to identify all 8 players in Major League history with at least 300 home runs and at least 300 stolen bases in their careers. 

::: {.content-hidden unless-meta="show-solutions"}
::: {.callout-note title="SOLUTION"}

```{r}
Batting |>
  group_by(playerID) |>
  summarize(
    first = min(yearID),
    last = max(yearID),
    tHR = sum(HR),
    tSB = sum(SB)
  ) |>
  filter(tHR >= 300 & tSB >= 300) |>
  arrange(desc(last)) |>
  left_join(People, by = join_by(playerID)) |>
  select(nameLast, nameFirst, first, last, tHR, tSB)
```

:::
:::

4. Use the **Lahman** package to identify all 10 pitchers in Major League history with at least 300 wins and at least 3000 strikeouts in their careers. 


::: {.content-hidden unless-meta="show-solutions"}
::: {.callout-note title="SOLUTION"}

```{r}
Pitching |>
  group_by(playerID) |>
  summarize(
    first = min(yearID),
    last = max(yearID),
    tW = sum(W),
    tSO = sum(SO)
  ) |>
  filter(tW >= 300 & tSO >= 3000) |>
  arrange(desc(last)) |>
  left_join(People, by = join_by(playerID)) |>
  select(nameLast, nameFirst, first, last, tW, tSO)
```

:::
:::

5. Use the `Teams` table from the **Lahman** package to produce the following table for all teams with the words "New York" or "Brooklyn" in their names.


```{r}
#| echo: false
Teams |>
  filter(str_detect(name, "New York|Brooklyn")) |>
  group_by(franchID) |>
  summarize(
    num_teamids = n_distinct(teamID),
    names = paste(unique(name), collapse = ","),
    num_seasons = n_distinct(yearID),
    first = min(yearID), 
    last = max(yearID),
    G = sum(G),
    wpct = sum(W) / sum(W + L),
    WS = sum(WSWin == "Y", na.rm = TRUE)
  ) |>
  arrange(desc(last), desc(G)) |>
  knitr::kable()
```

::: {.content-hidden unless-meta="show-solutions"}
::: {.callout-note title="SOLUTION"}

(see chunk)

:::
:::


## HW 2: Due 9/19

1. [*ABDWR*, Exercise 4.7.1](https://beanumber.github.io/abdwr3e/04-pythagoras.html#exercises)

::: {.callout-tip}

Hint: See <https://beanumber.github.io/abdwr3e/02-intro.html#iterating-using-map>

:::

::: {.content-hidden unless-meta="show-solutions"}
::: {.callout-note title="SOLUTION"}

```{r}
Teams |>
  filter(yearID >= 1961 & yearID <= 2000) |>
  select(teamID, yearID, lgID, G, W, L, R, RA) |>
  mutate(
    RD = R - RA, 
    wpct = W / (W + L),
    decade = floor(yearID %/% 10) * 10
  ) |>
  group_by(decade) |>
  group_split() |>
  map(~lm(wpct ~ RD, data = .x)) |>
  map(coef) |>
  bind_rows() |>
  mutate(
    plus10 = `(Intercept)` + RD * 10
  )
```

:::
:::

2. [*ABDWR*, Exercise 4.7.2](https://beanumber.github.io/abdwr3e/04-pythagoras.html#exercises)


::: {.content-hidden unless-meta="show-solutions"}
::: {.callout-note title="SOLUTION"}

```{r}
old <- Teams |>
  filter(yearID < 1900) |>
  select(teamID, yearID, lgID, G, W, L, R, RA) |>
  mutate(
    RD = R - RA, 
    wpct = W / (W + L),
    logWratio = log(W / L), 
    logRratio = log(R / RA)
  ) |>
  filter(W > 0)

mod_py <- lm(logWratio ~ 0 + logRratio, data = old)
mod_py
```

```{r}
plot(mod_py, 1)
mod_py |>
  broom::augment() |>
  slice(c(7, 40))
old[c(7, 40), ]
```

:::
:::

3. Fit a regression model to the `Teams` data since 1962 to estimate weights (i.e., run values) for the batting events included in [eXtrapolated Runs Basic](https://en.wikipedia.org/wiki/Extrapolated_Runs#Purpose_and_formulae). Compare your results to the values shown. Make sure that you compute everything *per game*!
    1. Report the [Root Mean Squared Error](https://en.wikipedia.org/wiki/Root_mean_square_deviation). 
    1. Which run values are most similar? 
    1. Which run values are most different? How meaningful are these differences? 
    1. For those run values that are most different, hypothesize why they might be different? 


::: {.content-hidden unless-meta="show-solutions"}
::: {.callout-note title="SOLUTION"}

```{r}
library(Lahman)
teams62 <- Teams |>
  filter(yearID >= 1962, G > 120) |>
  mutate(
    X1B = H - X2B - X3B - HR,
    OUTS = AB - H,
    WK = ifelse(is.na(HBP), 0, HBP) + BB,
    BAVG = H / AB,
    OBP = (H + WK) / (AB + WK + ifelse(is.na(SF), 0, SF)),
    SLG = (X1B + 2*X2B + 3*X3B + 4*HR) / AB,
    OPS = OBP + SLG,
    LWTS = 0.46*X1B + 0.8*X2B + 1.02*X3B + 1.4*HR + 0.33*WK + 0.3*SB - 0.6*CS - 0.25*(OUTS),
    XR = 0.5*X1B + 0.72*X2B + 1.04*X3B + 1.44*HR + 0.33*WK + 0.18*SB -0.32*CS - 0.098*OUTS
  ) |>
  mutate(
    across(c(R, X1B, X2B, X3B, HR, WK, OUTS, SF, SB, CS), \(x) x/G
  ))
```

```{r}
mod <- lm(R ~ X1B + X2B + X3B + HR + WK + SB + CS + OUTS, data = teams62)
summary(mod)

# RMSE
sqrt(mean(residuals(mod)^2))
```

:::
:::

4. For the same data set that you used above, compute:
    - [batting average](https://en.wikipedia.org/wiki/Batting_average#Baseball) (`BAVG`)
    - [on-base percentage](https://en.wikipedia.org/wiki/On-base_percentage) (`OBP`)
    - [slugging percentage](https://en.wikipedia.org/wiki/Slugging_percentage) (`SLG`)
    - [OPS](https://en.wikipedia.org/wiki/On-base_plus_slugging)
    - [Runs Created (basic)](https://en.wikipedia.org/wiki/Runs_created) (`RC`)
    - [eXtrapolated Runs Basic](https://en.wikipedia.org/wiki/Extrapolated_Runs#Purpose_and_formulae) (`XR`)
\
Compute the Pearson correlation coefficient between each of these run estimators and (actual) *runs per game*. Which metrics correlate most closely to runs per game? 


::: {.content-hidden unless-meta="show-solutions"}
::: {.callout-note title="SOLUTION"}

```{r}
teams62 |>
  select(R, BAVG, OBP, SLG, OPS, XR) |>
  cor()
```

:::
:::


## HW 3: Due 9/26

::: {.callout-tip}

Use may the following code to generate the expected run matrix for the 2016 season using Retrosheet play-by-play data. 

```{r}
#| message: false
library(tidyverse)
library(abdwr3edata)

half_innings <- retro2016 |>
  retrosheet_add_states() |>
  group_by(game_id, inn_ct, bat_home_id) |>
  summarize(
    outs_inning = sum(event_outs_ct), 
    runs_inning = sum(runs_scored),
    runs_start = first(away_score_ct + home_score_ct),
    max_runs = runs_inning + runs_start
  )

changes2016 <- retro2016 |>
  retrosheet_add_states() |>
  inner_join(half_innings, by = join_by(game_id, inn_ct, bat_home_id)) |>
  mutate(runs_roi = max_runs - (away_score_ct + home_score_ct)) |>
  filter(state != new_state | runs_scored > 0) |>
  filter(outs_inning == 3)
```

```{r}
erm2016 <- changes2016 |> 
  group_by(bases, outs_ct) |>
  summarize(exp_run_value = mean(runs_roi)) 
erm2016 |>
  pivot_wider(
    names_from = outs_ct, 
    values_from = exp_run_value, 
    names_prefix = "Outs="
  ) |>
  arrange(`Outs=0`) |>
  knitr::kable(digits = 3)
```

:::

1. [*ABDWR*, Exercise 5.11.1](https://beanumber.github.io/abdwr3e/05-runsexpectancy.html#exercises)
1. [*ABDWR*, Exercise 5.11.3](https://beanumber.github.io/abdwr3e/05-runsexpectancy.html#exercises)
1. [*ABDWR*, Exercise 5.11.4](https://beanumber.github.io/abdwr3e/05-runsexpectancy.html#exercises)
1. [*ABDWR*, Exercise 5.11.5](https://beanumber.github.io/abdwr3e/05-runsexpectancy.html#exercises)

## HW 4: Due 10/3

1. [*ABDWR*, Exercise 13.5.2](https://beanumber.github.io/abdwr3e/13-homeruns.html#exercises)
1. [*ABDWR*, Exercise 13.5.3](https://beanumber.github.io/abdwr3e/13-homeruns.html#exercises)

::: {.callout-tip}
It's just [logistic regression](https://en.wikipedia.org/wiki/Logistic_regression). Use the `glm()` function with `family = binomial`, or ask a `#question` on Slack about generalized linear models. 
:::

3. Use your creativity to create **one data graphic** like the ones shown in [Exploring Statcast data](slides/07_statcast.qmd). Try to make this data graphic as compelling as possible. 

## HW 5: Due 10/10

1. Use the `hoopR` (for the NBA) or the `wehoop` (for the WNBA) package to create a *compelling* data graphic. You could pursue something more statistical (like the scatterplots for the Four Factors) or something more visual (like the shot charts). 
1. Sports like field hockey, ice hockey, and soccer share important properties with basketball. Choose one of those sports (or another sport that you think would also fit), and describe how the concepts from the Four Factors would (or wouldn't) translate to that sport. 
