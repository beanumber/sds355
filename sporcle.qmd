---
title: Sporcle
format: 
  html:
    toc: true
    number-sections: true
    code-fold: show
params:
  solutions: true
---

::: {.callout-note}

<https://www.sporcle.com/games/subcategory/mlb>

You must **show your code**!!

:::

```{r}
#| message: false
library(tidyverse)
library(Lahman)
```

# Sporcle Quizzes

## 9/10: [MLB Teams Last MVP](https://www.sporcle.com/games/Knapster/mlbteammvp)

::: {.callout-tip title="My solution" collapse="true"}

```{r}
#| include: !expr params$solutions
#| message: false
# find all active teams (teams that played in 2023)
active_teams <- Teams |>
  filter(yearID == 2023) |>
  select(teamID, name)

# find all MVPs
AwardsPlayers |>
  filter(awardID == "Most Valuable Player") |>
  # find out which team(s) they played for in that year
  left_join(
    Appearances, 
    by = join_by("playerID", "yearID", "lgID")
  ) |>
  # sort them by year
  arrange(desc(yearID)) |>
  group_by(teamID) |>
  # take the first one, since they're already sorted
  summarize(
    playerID = first(playerID),
    yearID = first(yearID)
  ) |>
  # now reduce to only the active teams!
  right_join(active_teams, by = join_by(teamID)) |>
  arrange(name) |>
  # get the players' names
  left_join(People, by = join_by(playerID)) |>
  mutate(Player = paste(nameFirst, nameLast)) |>
  # make the headers match
  select(Team = name, Player, Year = yearID) |>
  knitr::kable()
```

:::

::: {.callout-tip title="My solution using SQL" collapse="true"}

```{sql}
#| connection: con
#| eval: false

SELECT 
  CONCAT(nameFirst, ' ', nameLast) AS Player, 
  t.name, 
  mvp_year AS Year
FROM AwardsPlayers ap
  LEFT JOIN Appearances a ON a.playerID = ap.playerID AND a.yearID = ap.yearID AND a.lgID = ap.lgID
  RIGHT JOIN (
    SELECT a.teamID, MAX(ap.yearID) AS mvp_year
    FROM AwardsPlayers ap
    LEFT JOIN Appearances a ON a.playerID = ap.playerID AND a.yearID = ap.yearID AND a.lgID = ap.lgID
    WHERE ap.awardID = 'Most Valuable Player' 
    GROUP BY a.teamID
    ORDER BY a.teamID
  ) last_mvps ON last_mvps.teamID = a.teamID AND last_mvps.mvp_year = a.yearID
  LEFT JOIN Teams t ON t.teamID = last_mvps.teamID
  LEFT JOIN People p ON p.playerID = a.playerID
WHERE ap.awardID = 'Most Valuable Player' 
  AND t.yearID = 2023
ORDER BY t.name;
```

```{r}
#| eval: false
#| include: false
dbGetQuery(con, "

SELECT 
  CONCAT(nameFirst, ' ', nameLast) AS Player, 
  t.name, 
  mvp_year AS Year
FROM AwardsPlayers ap
  LEFT JOIN Appearances a ON a.playerID = ap.playerID AND a.yearID = ap.yearID AND a.lgID = ap.lgID
  RIGHT JOIN (
    SELECT a.teamID, MAX(ap.yearID) AS mvp_year
    FROM AwardsPlayers ap
    LEFT JOIN Appearances a ON a.playerID = ap.playerID AND a.yearID = ap.yearID AND a.lgID = ap.lgID
    WHERE ap.awardID = 'Most Valuable Player' 
    GROUP BY a.teamID
    ORDER BY a.teamID
  ) last_mvps ON last_mvps.teamID = a.teamID AND last_mvps.mvp_year = a.yearID
  LEFT JOIN Teams t ON t.teamID = last_mvps.teamID
  LEFT JOIN People p ON p.playerID = a.playerID
WHERE ap.awardID = 'Most Valuable Player' 
  AND t.yearID = 2023
ORDER BY t.name;

")
```

:::


## 9/15: [MLB Top 5 HR Hitters (1970-2009)](https://www.sporcle.com/games/bennyboy44/top5hrhitters)

::: {.callout-tip title="My solution" collapse="true"}

```{r}
library(tidyverse)
library(Lahman)
Batting |>
  filter(yearID >= 1970 & yearID <= 2009) |>
  group_by(playerID, yearID) |>
  summarize(
    teamIDs = paste(unique(teamID), collapse = "/"),
    tHR = sum(HR)
  ) |>
  left_join(People, by = join_by(playerID)) |>
  mutate(player_name = paste(nameLast, nameFirst)) |>
  select(yearID, teamIDs, player_name, tHR) |>
  ungroup() |>
  group_by(yearID) |>
  group_split() |>
  map(~arrange(.x, desc(tHR))) |>
  map(head, n = 5) |>
  bind_rows() |>
  arrange(desc(yearID), desc(tHR)) |>
  select(-playerID) |>
  knitr::kable()
```

:::
::: {.callout-tip title="My (partial) solution using SQL" collapse="true"}

```{sql}
#| connection: con
#| eval: false
SELECT 
  CONCAT(ANY_VALUE(p.nameFirst), ' ', ANY_VALUE(p.nameLast)) AS Player, 
  yearID, 
  GROUP_CONCAT(DISTINCT teamID) AS teamIDs, 
  SUM(HR) AS tHR
FROM Batting b
LEFT JOIN People p ON p.playerID = b.playerID
WHERE yearID >= 1970 AND yearID < 2010
  AND yearID = 2009
GROUP BY b.playerID, yearID
ORDER BY tHR DESC
LIMIT 5;
```

```{r}
#| eval: false
#| include: false
dbGetQuery(con, "

SELECT 
  CONCAT(ANY_VALUE(p.nameFirst), ' ', ANY_VALUE(p.nameLast)) AS Player, 
  yearID, 
  GROUP_CONCAT(DISTINCT teamID) AS teamIDs, 
  SUM(HR) AS tHR
FROM Batting b
LEFT JOIN People p ON p.playerID = b.playerID
WHERE yearID >= 1970 AND yearID < 2010
  AND yearID = 2009
GROUP BY b.playerID, yearID
ORDER BY tHR DESC
LIMIT 5;
")
```

:::

## 9/17: [MLB 40-HRs by 4-Letter Players](https://www.sporcle.com/games/deej/40hr4letters)


::: {.callout-tip title="My solution" collapse="true"}

```{r}
Batting |>
  group_by(playerID, yearID) |>
  summarize(
    tHR = sum(HR)
  ) |>
  filter(tHR >= 40) |>
  group_by(playerID) |>
  summarize(
    n = n(),
    last = max(yearID)
  ) |>
  arrange(desc(n)) |>
  left_join(People, by = join_by(playerID)) |>
  filter(nchar(nameLast) <= 4) |>
  select(n, last, nameLast, nameFirst) |>
  knitr::kable()
```

:::
::: {.callout-tip title="My solution using SQL" collapse="true"}

```{sql}
#| connection: con
#| eval: false
SELECT 
  COUNT(DISTINCT yearID) AS N, 
  MAX(yearID) AS most_recent, 
  ANY_VALUE(p.nameLast) AS last_name
FROM
  (SELECT playerID, yearID, SUM(HR) AS tHR
  FROM Batting
  GROUP BY playerID, yearID
  HAVING SUM(HR) >= 40) AS hr40
LEFT JOIN People p ON p.playerID = hr40.playerID
GROUP BY hr40.playerID
HAVING LEN(ANY_VALUE(p.nameLast)) <= 4
ORDER BY N DESC;
```

```{r}
#| eval: false
#| include: false
dbGetQuery(con, "

SELECT COUNT(DISTINCT yearID) AS N, MAX(yearID) AS most_recent, ANY_VALUE(p.nameLast) AS last_name
FROM
  (SELECT playerID, yearID, SUM(HR) AS tHR
  FROM Batting
  GROUP BY playerID, yearID
  HAVING SUM(HR) >= 40) AS hr40
LEFT JOIN People p ON p.playerID = hr40.playerID
GROUP BY hr40.playerID
HAVING LEN(ANY_VALUE(p.nameLast)) <= 4
ORDER BY N DESC;

")
```

:::

## 9/22: [Multiple Cy Young Winners](https://www.sporcle.com/games/g/cyyoungmulti)


::: {.callout-tip title="My solution" collapse="true"}

```{r}
AwardsPlayers |>
  filter(str_detect(awardID, "Cy Young")) |>
  group_by(playerID) |>
  summarize(
    n = n(),
    years = paste(yearID, collapse = ", ")
  ) |>
  filter(n > 1) |>
  arrange(n)
```

:::
::: {.callout-tip title="My solution using SQL" collapse="true"}

```{sql}
#| connection: con
#| eval: false
SELECT playerID, COUNT(*) AS num_awards, GROUP_CONCAT(yearID) AS years
FROM AwardsPlayers
WHERE awardID = 'Cy Young Award'
GROUP BY playerID
HAVING COUNT(*) > 1
ORDER BY COUNT(*);
```

```{r}
#| eval: false
#| include: false
dbGetQuery(con, "

SELECT playerID, COUNT(*) AS num_awards, GROUP_CONCAT(yearID) AS years
FROM AwardsPlayers
WHERE awardID = 'Cy Young Award'
GROUP BY playerID
HAVING COUNT(*) > 1
ORDER BY COUNT(*);

")
```

:::



## 9/24: [MLB Win Leaders by Team](https://www.sporcle.com/games/g/mlb_teamwinsleaders)

::: {.callout-tip title="My solution" collapse="true"}

```{r}
Pitching |>
  group_by(playerID, teamID) |>
  summarize(wins = sum(W)) |>
  group_by(teamID) |>
  group_split() |>
  map(arrange, desc(wins)) |>
  map(slice_head, n = 1) |>
  bind_rows() |>
  right_join(
    Teams |>
      filter(yearID == 2023) |>
      select(teamID, name),
    by = join_by(teamID)
  ) |>
  arrange(name) |>
  knitr::kable()
```

:::

## 9/24: [MLB Most Wins by Decade](https://www.sporcle.com/games/draftace/mlbwinsbydecade)

::: {.callout-tip title="My solution" collapse="true"}

```{r}
#| eval: false
#| include: false
Pitching |>
  mutate(decade = floor(yearID / 10) * 10) |>
  group_by(playerID, decade) |>
  summarize(
    wins = sum(W)
  ) |>
  group_by(decade) |>
  group_split() |>
  map(arrange, desc(wins)) |>
  map(slice_head, n = 1) |>
  bind_rows()
```

:::

## 9/24: [MLB Home Run Leaders (A-Z)](https://www.sporcle.com/games/g/azhomerunleaders)

::: {.callout-tip title="My solution" collapse="true"}

```{r}
#| eval: false
#| include: false
Batting |>
  group_by(playerID) |>
  summarize(
    Letter = first(str_sub(playerID, 1, 1)),
    HomeRuns = sum(HR)
  ) |>
  group_by(Letter) |>
  group_split() |>
  map(arrange, desc(HomeRuns)) |>
  map(head, 1) |>
  bind_rows()
```

:::

# Appendix

## How to create a SQL duckdb database from the Lahman package { .appendix}

### Educate yourself

1. Read [*R for Data Science*, Ch. 21](https://r4ds.hadley.nz/databases.html)
1. See also [*Modern Data Science with R*, Ch. 15](https://mdsr-book.github.io/mdsr3e/15-sqlI.html)

### Instantiate the database

Create a duckdb instance 

```{r}
#| message: false
library(dbplyr)
library(duckdb)
con <- DBI::dbConnect(duckdb::duckdb())
```

### Populate the database

Start populating it with data from the **Lahman** package. 

```{r}
# Have to do this for every table...
dbWriteTable(con, "Teams", Lahman::Teams)
dbWriteTable(con, "People", Lahman::People)
dbWriteTable(con, "Appearances", Lahman::Appearances)
dbWriteTable(con, "AwardsPlayers", Lahman::AwardsPlayers)
dbWriteTable(con, "Batting", Lahman::Batting)
dbWriteTable(con, "TeamsFranchises", Lahman::TeamsFranchises)
```

::: {.callout-tip}

Challenge: Use a `map()` statement to do them all!

:::

### Step 4: Inpsect the database

```{r}
dbListTables(con)
```

### Access

Now, you can access the data in your duckdb SQL database in several ways.

#### Using `dbplyr`

```{r}
teams <- tbl(con, "Teams")

active_teams <- teams |>
  filter(yearID == 2023) |>
  select(teamID, name)

active_teams
```

And you can see the translated SQL query!

```{r}
active_teams |>
  show_query()
```

#### Using `DBI`

If you want to practice writing the raw SQL query

```{r}
con |>
  dbGetQuery(
"
SELECT teamID, name
FROM teams
WHERE yearID = 2023;
"
)
```

#### Using Quarto/Markdown

If you want SQL syntax highlighting, and to use the data back in R, make an SQL chunk

```{sql}
#| connection: con
#| output.var: "teams_sql"
#| echo: fenced
SELECT teamID, name
FROM teams
WHERE yearID = 2023;
```

```{r}
#| echo: fenced
teams_sql
```



